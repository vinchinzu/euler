# Problem 107: Minimal Network

class DSU
  def initialize(num_elements)
    @parent = Array.new(num_elements) { |i| i }
    @rank = Array.new(num_elements, 0) # For union by rank
    # Or use @size = Array.new(num_elements, 1) for union by size
  end

  def find(i)
    if @parent[i] == i
      i
    else
      @parent[i] = find(@parent[i]) # Path compression
      @parent[i]
    end
  end

  def union(i, j)
    root_i = find(i)
    root_j = find(j)

    if root_i != root_j
      # Union by rank
      if @rank[root_i] < @rank[root_j]
        @parent[root_i] = root_j
      elsif @rank[root_i] > @rank[root_j]
        @parent[root_j] = root_i
      else
        @parent[root_j] = root_i
        @rank[root_i] += 1
      end
      return true # Merged
    end
    false # Already in the same set
  end
end

def solve_problem_107
  network_data_string = <<~HEREDOC
-,16,12,21,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
16,-,-,17,20,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
12,-,-,28,-,31,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
21,17,28,-,18,19,23,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,20,-,18,-,-,11,25,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,31,19,-,-,27,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,23,11,27,-,14,21,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,25,-,14,-,19,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,21,19,-,16,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,16,-,12,18,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,12,-,22,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,18,22,-,15,19,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,15,-,14,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,19,14,-,13,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,13,-,17,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,17,-,15,24,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,15,-,29,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,24,29,-,18,20,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,18,-,15,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,20,15,-,24,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,24,-,27,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,27,-,14,16,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,14,-,12,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,16,12,-,24,-,-,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,24,-,16,18,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,16,-,28,-,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,18,28,-,15,-,-,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,15,-,20,-,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,20,-,22,-,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,22,-,24,-,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,24,-,19,-,-,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,19,-,17,15,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,17,-,16,-,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,15,16,-,25,-,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,25,-,21,-,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,21,-,12,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,12,-,18
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,18,-
-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
  HEREDOC

  edges = []
  original_total_weight = 0
  
  rows = network_data_string.strip.split("\n")
  num_vertices = rows.length

  rows.each_with_index do |line, u|
    parts = line.strip.split(',')
    parts.each_with_index do |part, v|
      next if part == '-'
      weight = part.to_i
      if u < v # Only add edge once for an undirected graph
        edges << [weight, u, v]
        original_total_weight += weight
      end
    end
  end

  edges.sort_by! { |edge| edge[0] } # Sort by weight

  mst_weight = 0
  num_edges_in_mst = 0
  dsu = DSU.new(num_vertices)

  edges.each do |weight, u, v|
    if dsu.union(u, v) # If u and v were in different sets, union merges them and returns true
      mst_weight += weight
      num_edges_in_mst += 1
      break if num_edges_in_mst == num_vertices - 1 # MST is complete
    end
  end

  saving = original_total_weight - mst_weight
  puts saving
end

# Call the main solving function
solve_problem_107
